import { Component, MetaData, Watch } from '../core'// import * as animation from '../core/animation/index'import * as velocity from '../core/util/velocity'import * as touchEvent from '../core/util/touch-event'import {  fadeIn, fadeOut, slideInUp, slideOutUp,} from '../core/animation'const PickerOptions = {  data: [],  value: [],  cols: 3,  mask: true,  title: '',  okText: '确定',  dismissText: '取消',  disabled: false,  cascade: true,  appendToBody: false,  // onDismiss: () =,  // onPickerChange: new Event(),  indicatorStyle: {},  hidePicker: () => null,  confirm: result => null,  cancel: () => null,  updateNgModel: (value = []) => null,}// <div *ngFor="let item of dataForRender; let i = index" class="h-picker-col">//   <div class="h-picker-col-indicator " style="top: 102px;" [ngStyle]="options.indicatorStyle"></div>//   <div class="h-picker-col-mask" style="background-size: 100% 102px;" id={{i}}></div>// <div class="h-picker-col-content">// <div *ngFor="let val of item; let i = index" class="h-picker-col-item" id={{i}}>{{val.label?val.label:val}}</div>// </div>// </div>@MetaData({  tag: 'h-picker',  props: [    {      name: 'data',      type: Array,      default: [],    },    {      name: 'value',      type: String,      default: '',    },    {      name: 'title',      type: String,      default: '',    },  ],})export default class Picker extends Component {  static get observedAttributes() {    return ['data', 'value']  }  constructor() {    super()    this.startY = 0    this.differY = 0    this.currentY = 0    this.len = 0    this.dom = null    this.index = 0    this.maxY = 0    this.lineHeight = 38    this.dataForRender = []    this.selectedTarget = []    this.isMouseDown = false    this.Velocity = velocity.getVelocity()    this.currentPicker = null    this.options = PickerOptions    this.root = this.shadowRoot.querySelector('.h-picker-root')  }  render() {    return `        <style>${(require('./picker.inline.css'))()}</style>        <div class="h-picker-root" >            <h-mask></h-mask>            <div class="h-picker-popup">              <div class="h-picker-popup-content">                <div class="h-picker-popup-body">                  <div>                    <div class="h-picker-popup-header">                      <div id="cancelButton" class="h-picker-popup-item h-picker-popup-header-left">                        取消                      </div>                      <div class="h-picker-popup-item h-picker-popup-title">${this.title}</div>                      <div id="okButton" class="h-picker-popup-item h-picker-popup-header-right"                      >                        确定                      </div>                    </div>                    <div id="picker" class="h-picker" style="flex-direction: row; align-items: center;">                        ${this.dataForRender ? this.dataForRender.map((col, i) => `                            <div class="h-picker-col">                              <div class="h-picker-col-indicator" ></div>                              <div class="h-picker-col-mask" id=${i}></div>                              <div class="h-picker-col-content">                                ${col.map((item, index) => `<div class="h-picker-col-item" id="${index}">${item.label ? item.label : item}</div>`)      .join('')}                              </div>                            </div>`,    )    .join('') : ''}                    </div>                  </div>                </div>              </div>            </div>        </div>    `  }  init() {    this.firstLoad = true    this.initAttribute()    const mask = this.shadowRoot.querySelector('h-mask')    mask.addEventListener('backdrop', this.close.bind(this), false)    const cancelButton = this.shadowRoot.querySelector('#cancelButton')    cancelButton.addEventListener('click', this.close.bind(this), false)    const okButton = this.shadowRoot.querySelector('#okButton')    okButton.addEventListener('click', () => {      const okData = []      this.dataForRender.forEach((col, colIndex) => {        col.forEach((item, index) => {          if ((Math.abs(this.selectedTarget[colIndex].currentY)) === index) {            okData.push(item)          }        })      })      this.emit('ok', okData)      this.close()    }, false)  }  _setData() {    if (this.dataForRender.length === 0 && this._generateArrayData(this.data).length > 0) {      this.dataForRender.push(this._generateArrayData(this.data))    }    if (this.options.value.length > 0) {      // this.getInitValueIndex(this.dataForRender);    }    if (this.selectedTarget.length === 0) {      this._checkArrayDeep(this.data[0])      for (let index = 0; index < this.dataForRender.length; index++) {        this.selectedTarget.push({          targetId: `${index}`,          currentY: 0,        })      }    } else {    }  }  _listener() {    const pickerColMask = this.shadowRoot.querySelectorAll('.h-picker-col-mask')    pickerColMask.forEach((col) => {      // panstart      col.addEventListener('mousedown', this.panstart.bind(this), false)      col.addEventListener('touchstart', this.panstart.bind(this), false)      // panmove      col.addEventListener('mousemove', this.panmove.bind(this), false)      col.addEventListener('touchmove', this.panmove.bind(this), false)      // panend      col.addEventListener('mouseup', this.panend.bind(this), false)      col.addEventListener('mouseleave', this.panend.bind(this), false)      col.addEventListener('touchend', this.panend.bind(this), false)    })  }  panstart(event) {    // if (!event.target.classList.contains('h-picker-col-mask') || this.options.disabled) {    if (!event.target.classList.contains('h-picker-col-mask') || this.options.disabled) {      return    }    this.isMouseDown = true    event.preventDefault()    this.dom = touchEvent.getEventTarget(event).target.parentElement.children[2]    // console.log('dom', event)    this.len = this.dom.children.length    this.maxY = -(this.len - 1)    if (this.dom.style.transform === 'translateY(0px)') {      this.currentY = 0      this.maxY = -(this.len - 1)    } else if (this.selectedTarget.length > 0) {      this.selectedTarget.forEach((item) => {        if (item.targetId === event.target.id) {          this.currentY = item.currentY        }      })    }    this.startY = touchEvent.getEventTarget(event).clientY  }  panmove(event) {    if (!event.target.classList.contains('h-picker-col-mask') || !this.isMouseDown || this.options.disabled) {      return    }    event.preventDefault()    const ev = touchEvent.getEventTarget(event)    this.differY = ev.clientY - this.startY    this.Velocity.record(this.differY)    this.dom.style.transition = 'transform 0s'    this.dom.style.transform = `translateY(${this.currentY * this.lineHeight + this.differY}px)`  }  panend(event) {    if (!event.target.classList.contains('h-picker-col-mask') || !this.isMouseDown || this.options.disabled) {      return    }    this.isMouseDown = false    event.preventDefault()    const ev = touchEvent.getEventTarget(event)    this.differY = ev.clientY - this.startY    let time = 0.3    const velocityTemp = this.Velocity.getVelocity(this.differY) * 4    if (velocity) {      this.differY = velocityTemp * 40 + this.differY      time = Math.abs(velocityTemp) * 0.1    }    this.dom.style.transition = `transform ${time < 0.3 ? 0.3 : time}s`    if (this.differY <= -this.lineHeight / 2) {      this.currentY += Math.round(this.differY / this.lineHeight)      if (this.currentY <= this.maxY) {        this.currentY = this.maxY      }    } else if (this.differY >= this.lineHeight / 2) { // round(x)      // console.log('大于', Math.floor(this.differY / this.lineHeight), Math.round(this.differY / this.lineHeight))      this.currentY += Math.round(this.differY / this.lineHeight)      if (this.currentY >= 0) {        this.currentY = 0      }    }    // console.log('currentY', this.currentY)    if (this.selectedTarget.length > 0) {      let hasKey = false      this.selectedTarget.forEach((item) => {        if (item.targetId === event.target.id) {          hasKey = true          item.targetId = event.target.id          item.currentY = this.currentY        } else if (parseInt(item.targetId, 0) > parseInt(event.target.id, 0) && this.options.cascade) {          item.currentY = 0        }      })      if (!hasKey) {        this.selectedTarget.push({          targetId: event.target.id,          currentY: this.currentY,        })      }    } else {      this.selectedTarget.push({        targetId: event.target.id,        currentY: this.currentY,      })    }    // console.log('this.dom', this.dom, this.currentY)    this.dom.style.transform = `translateY(${this.currentY * this.lineHeight}px)`    this.index = Math.floor(Math.abs(this.currentY / 1))    this.setCurrentSelected(parseInt(event.target.id, 0), this.index)    if (this.options.value !== this.combineReslut()) {      this.emit('onPickerChange', this.combineReslut())      this.onChange(this.combineReslut())    }  }  setCurrentSelected(target, index) {    this.currentPicker = this.dataForRender[target][index]    this.emit('change', this.currentPicker)    if (!this.options.cascade) {      return    }    const a = this.dataForRender.slice(0, target + 1)    this.dataForRender = a    // this._dataWatch()    // console.log('dataForRender 2', this.dataForRender)    this._checkArrayDeep(this.dataForRender[target][index])    // console.log('selectedTarget', this.selectedTarget)    // console.log('dataForRender', this.dataForRender)    if (this.selectedTarget.length > 0 && this.selectedTarget.length < this.dataForRender.length) {      for (let i = 0; i < this.dataForRender.length; i++) {        if (target !== i) {          this.selectedTarget.push({            targetId: `${i}`,            currentY: 0,          })        }      }    }    setTimeout(() => {      this.dataForRender.forEach((item, i) => {        if (target !== `${i}` && i > target) {          const picker = this.shadowRoot.querySelector('#picker')          // console.log(picker.children[i].children[2])          picker.children[i].children[2].style.transition = 'transform .3s'          picker.children[i].children[2].style.transform = 'translateY(0px)'        }      })    }, 0)    this.data = this.dataForRender    // console.log('selectedTarget', this.selectedTarget)    // console.log('dataForRender 3', this.dataForRender)  }  // 打开  static show({ data }) {    const hasPicker = document.querySelector('h-picker')    if (hasPicker) this.hide()    const Picker = customElements.get('h-picker')    const picker = new Picker()    picker.data = data    document.body.appendChild(picker)    const popup = picker.shadowRoot.querySelector('.h-picker-popup')    slideInUp(popup)    .then(() => {      picker.style.display = 'block'    })    return picker  }  // 隐藏  static hide() {    const popup = document.querySelector('h-picker')    .querySelector('.h-picker-popup')    if (popup) {      slideOutUp(popup)      .then(() => {        if (this.parentNode) this.parentNode.removeChild(this)      })    }  }  // 关闭  open() {    console.log(this)    // const popup = picker.shadowRoot.querySelector('.h-picker-popup')    this.render()    slideInUp(this)    .then(() => {      this.style.display = 'block'    })    return this.close()  }  // 关闭  close() {    const popup = this.shadowRoot.querySelector('.h-picker-popup')    if (popup) {      slideOutUp(popup)      .then(() => {        if (this.parentNode) this.parentNode.removeChild(this)      })    }  }  connectedCallback() {    this._dataWatch()    this.init()    this.reloadPicker()  }  initAttribute() {    // this.setAttribute('data', this.data)    // this.setAttribute('view', this.view)  }  @Watch('data')  _dataWatch(attrName, oldVal, newVal) {    this._setData()    this.shadowRoot.querySelector('#picker').innerHTML = `${this.dataForRender ? this.dataForRender.map((col, i) => `      <div class="h-picker-col">        <div class="h-picker-col-indicator " ></div>        <div class="h-picker-col-mask" id=${i}></div>        <div class="h-picker-col-content">          ${col.map(item => `<div class="h-picker-col-item" id=${i}>${item.label ? item.label : item}</div>`)    .join('')}        </div>      </div>    `)    .join('') : ''}`    // console.log(this.selectedTarget)    if (this.selectedTarget.length > 0) {      this.selectedTarget.forEach((item, i) => {        const picker = this.shadowRoot.querySelector('#picker')        if (picker.children[i]) {          picker.children[i].children[2].style.transition = 'transform .3s'          picker.children[i].children[2].style.transform = `translateY(${item.currentY * this.lineHeight}px)`        }      })    }    this._listener()  }  disconnectedCallback() {    // console.log('插入到DOM', this)  }  onChange(_) {    return {}  }  combineReslut() {    const result = []    const self = this    self.selectedTarget.forEach((item) => {      if (self.dataForRender.length > 0 && self.dataForRender.length >= parseInt(item.targetId, 0) + 1) {        const curItem = self.dataForRender[parseInt(item.targetId, 0)][-item.currentY]        if (curItem !== undefined) {          result.push(curItem)        }      }    })    return result  }  _generateArrayData(targetArr) {    const tempArr = []    // console.log('targetArr1', targetArr)    if (targetArr instanceof Array) {      targetArr.forEach((item, i) => {        if (item instanceof Array) {          const keys = Object.keys(item)          const element = {}          keys.forEach((key) => {            element[key] = targetArr[i][key] || targetArr[i]          })          tempArr.push(element)        } else {          tempArr.push(item)        }      })      return tempArr    }    return []  }  _checkArrayDeep(parent, init = true) {    if (parent instanceof Object && parent.children && parent.children.length > 0) {      if (this._generateArrayData(parent.children).length > 0 && this.dataForRender.length < this.options.cols) {        let hasValue = false        this.dataForRender.filter((item, index) => {          if (JSON.stringify(item) === JSON.stringify(parent.children)) {            hasValue = true          }        })        if (!hasValue) {          this.dataForRender.push(this._generateArrayData(parent.children))        }        if (init) {          this._checkArrayDeep(parent.children[0])        }      }    }  }  reloadPicker() {    // if (!this._picker || this._picker === undefined) {    //   return;    // }    // this.currentPicker = this._picker.element.nativeElement;    // if (this.currentPicker && this.currentPicker.children.length > 0) {    //   const self = this;    //   setTimeout(() => {    //     self.selectedTarget.forEach((item, i) => {    //       self.currentPicker.children[i].children[2].style.transition = 'transform .3s';    //       const index = parseInt(item.currentY, 0);    //       self.currentPicker.children[i].children[2].style.transform = `translateY(${index * self.lineHeight}px)`;    //     });    //   }, 0);    // }  }}